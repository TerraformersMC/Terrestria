plugins {
	id 'java'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'
	id 'fabric-loom' version '0.12-SNAPSHOT'
	// id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1'
}

apply from: 'https://raw.githubusercontent.com/TerraformersMC/GradleScripts/2.5/ferry.gradle'

dependencies {
	minecraft "com.mojang:minecraft:$project.minecraft_version"
	mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// === Active modules: We use the APIs of these modules, and they need to be loaded. ===

	// Adding our biomes to the overworld biome generator
	includeFabricApiModule "fabric-biome-api-v1"

	// FabricBlockSettings
	includeFabricApiModule "fabric-object-builder-api-v1"

	// Custom block render layer registration (such as for leaves)
	includeFabricApiModule "fabric-blockrenderlayer-v1"

	// FlammableBlockRegistry, FuelRegistry, etc
	includeFabricApiModule "fabric-content-registries-v0"

	// FabricItemGroupBuilder
	includeFabricApiModule "fabric-item-groups-v0"

	// ColorProviderRegistry
	includeFabricApiModule "fabric-rendering-v1"

	// EntityRendererRegistry
	includeFabricApiModule "fabric-renderer-registries-v1"

	// === Dependency modules: Required by other modules to function ===

	// Base module required by most other fabric api modules
	includeFabricApiModule "fabric-api-base"

	// Used by terraform-wood-api-v1
	includeFabricApiModule "fabric-networking-api-v1"

	// Used by fabric-content-registries-v1
	includeFabricApiModule "fabric-lifecycle-events-v1"

	// === Passive modules: While we don't use the public APIs of these modules (if any), they provide important ===
	// === functions just by being loaded in the first place. ===

	// Important information in crash reports
	includeFabricApiModule "fabric-crash-report-info-v1"

	// Ensures consistency of registry content in multiplayer and when loading a saved game
	// Very important, will result in data loss if removed!
	includeFabricApiModule "fabric-registry-sync-v0"

	// Loads the Terrestria asset pack and data pack.
	includeFabricApiModule "fabric-resource-loader-v0"

	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-biome-remapper-api-v1:${project.terraform_biome_remapper_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-config-api-v1:${project.terraform_config_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-dirt-api-v1:${project.terraform_dirt_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-shapes-api-v1:${project.terraform_shapes_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-surfaces-api-v1:${project.terraform_surfaces_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-tree-api-v1:${project.terraform_tree_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_wood_api_version}"

	if (findProject(':worldgen') != null) {
		includeMod "terrablender", "com.github.glitchfiend:TerraBlender-fabric:${terrablender_version}"
	}

	afterEvaluate {
		subprojects.each {
			testmodImplementation sourceSets.main.output
			implementation project(path: "${it.name}", configuration: "namedElements")
			include project("${it.name}:")
		}
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'
	// apply plugin: 'io.github.juuxel.loom-quiltflower-mini'

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	group = project.maven_group

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	// quiltflower {
	// 	addToRuntimeClasspath.set(true)
	// }

	configurations {
		dev {
			canBeResolved = false
			canBeConsumed = true
		}
	}

	jar {
		classifier = "dev"
	}

	afterEvaluate {
		processResources {
			inputs.property "version", project.version

			filesMatching("fabric.mod.json") {
				expand "version": project.version
			}
		}
	}

	//task sourcesJar(type: Jar, dependsOn: classes) {
	//	classifier = "sources"
	//	from sourceSets.main.allSource
	//}

	tasks.withType(JavaCompile) {
		it.options.encoding = "UTF-8"
		it.options.release = 17
	}

	repositories {
		maven {
			name = 'TerraformersMC'
			url = 'https://maven.terraformersmc.com/'
		}

		// TerraBlender
		maven {
			url = 'https://maven.minecraftforge.net/'
		}
	}
}

subprojects {
	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

		modImplementation "com.terraformersmc.terraform-api:terraform-biome-remapper-api-v1:${project.terraform_biome_remapper_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-config-api-v1:${project.terraform_config_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-dirt-api-v1:${project.terraform_dirt_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-shapes-api-v1:${project.terraform_shapes_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-surfaces-api-v1:${project.terraform_surfaces_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-tree-api-v1:${project.terraform_tree_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_wood_api_version}"
	}

	version = rootProject.version

	runClient.enabled = false
}

def includeFabricApiModule(String moduleName) {
	includeMod "fabric-api", fabricApi.module(moduleName, project.fabric_version)
}
